<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker下Redis的配置及使用</title>
    <url>/2020/03/14/Docker%E4%B8%8BRedis%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Docker下Redis的配置及使用"><a href="#Docker下Redis的配置及使用" class="headerlink" title="Docker下Redis的配置及使用"></a>Docker下Redis的配置及使用</h3><h4 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h4><ol>
<li><p>通过 <strong><em>uname -r</em></strong> 命令查看当前系统内核版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>
</li>
<li><p>确保yum包更新至最新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>
</li>
<li><p>*卸载旧版本(如果安装过)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装最新版本的 docker社区版（Docker CE）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过运行 hello-world 镜像验证是否正确安装了Docker CE </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="Redis的配置"><a href="#Redis的配置" class="headerlink" title="Redis的配置"></a>Redis的配置</h4><ol>
<li><p>拉取redis镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:lastest</span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地创建配置及数据目录, 方便管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/redis/conf</span><br><span class="line">mkdir -p /home/redis/data</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑redis配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /home/redis/conf/redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定Redis监听端口，默认端口为6379</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定的主机地址，不要绑定容器的本地127.0.0.1地址，因为这样就无法在容器外部访问</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑启动脚本redis.bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi redis.bash</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -p 6379:6379 \</span><br><span class="line"> --name redis \</span><br><span class="line"> -v /home/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line"> -v /home/redis/data:/data \</span><br><span class="line"> -d \</span><br><span class="line"> redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>命令说明: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -p 6379:6379 \ <span class="comment"># 映射本地6379端口到容器6379端口，前为本地端口</span></span><br><span class="line"> --name redis \ <span class="comment"># 设置容器名称为redis，方便以后使用docker ps进行管理</span></span><br><span class="line"> -v /home/redis/conf/redis.conf:/etc/redis/redis.conf \ </span><br><span class="line"> <span class="comment"># 关联本地/home/redis/conf/redis.conf文件到容器中/etc/redis/redis.conf</span></span><br><span class="line"> -v /home/redis/data:/data \</span><br><span class="line"> <span class="comment"># 关联本地/docker/redis/data到容器内/data目录</span></span><br><span class="line"> -d \ <span class="comment"># 后台启动，使用此方式启动，则redis.conf中daemonize必须设置为no，否则会无法启动</span></span><br><span class="line"> redis redis-server /etc/redis/redis.conf </span><br><span class="line"> <span class="comment"># 在容器内启动redis-server的命令，主要是为了加载配置</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 redis.bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis.bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如需访问容器，可使用</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis bash</span><br><span class="line"><span class="comment"># 或直接使用redis-cli访问容器内redis</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis redis-cli</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 2.x自定义RedisCacheManager</title>
    <url>/2020/02/06/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89RedisCacheManager/</url>
    <content><![CDATA[<h3 id="SpringBoot-2-x自定义RedisCacheManager"><a href="#SpringBoot-2-x自定义RedisCacheManager" class="headerlink" title="SpringBoot 2.x自定义RedisCacheManager"></a>SpringBoot 2.x自定义RedisCacheManager</h3><h4 id="SpringBoot-2-0版本中创建RedisCacheManager的方式"><a href="#SpringBoot-2-0版本中创建RedisCacheManager的方式" class="headerlink" title="SpringBoot 2.0版本中创建RedisCacheManager的方式"></a>SpringBoot 2.0版本中创建RedisCacheManager的方式</h4><p>SpringBoot2.0以后, 创建RedisCacheManager的方式有:</p>
<ol>
<li><p>通过<strong>RedisCacheManager.builder(redisConncetionFactory)</strong></p>
<p><strong>.cacheDefaults(redisCacheConfiguration).build()</strong>的方式</p>
</li>
<li><p>通过<strong>new RedisCacheManager(RedisCacheWriter cacheWriter, RedisCacheConfiguration defaultCacheConfiguration)</strong>的方式创建RedisCacheManager </p>
</li>
</ol>
<p>RedisConncetionFactory为方法中传入的参数, 而RedisCacheConfiguration则需要单独进行配置:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置RedisCacheConfiguration</span></span><br><span class="line">RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration</span><br><span class="line">				.defaultCacheConfig() <span class="comment">//使用默认配置创建对象</span></span><br><span class="line">                .disableCachingNullValues()  <span class="comment">//禁止缓存空值</span></span><br><span class="line">                .entryTtl(Duration.ofDays(<span class="number">1</span>)) <span class="comment">//设置缓存过期时间 1天</span></span><br><span class="line">                .serializeValuesWith(RedisSerializationContext</span><br><span class="line">                        .SerializationPair</span><br><span class="line">                        <span class="comment">//设置Value的序列化机制为Json</span></span><br><span class="line">                        .fromSerializer(RedisSerializer.json()));</span><br></pre></td></tr></table></figure>



<p><strong>RedisCacheConfiguration</strong>类中的源码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">			ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">		RedisCacheManagerBuilder builder = RedisCacheManager.builder(redisConnectionFactory)</span><br><span class="line">				.cacheDefaults(determineConfiguration(resourceLoader.getClassLoader()));</span><br><span class="line">		List&lt;String&gt; cacheNames = <span class="keyword">this</span>.cacheProperties.getCacheNames();</span><br><span class="line">		<span class="keyword">if</span> (!cacheNames.isEmpty()) &#123;</span><br><span class="line">			builder.initialCacheNames(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(cacheNames));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.customizerInvoker.customize(builder.build());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>自定义配置RedisCacheManager:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置cache组件</span></span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig() <span class="comment">//开启配置</span></span><br><span class="line">                .disableCachingNullValues()  <span class="comment">//禁止缓存空值</span></span><br><span class="line">                .entryTtl(Duration.ofDays(<span class="number">1</span>)) <span class="comment">//设置缓存过期时间 1天</span></span><br><span class="line">                .serializeValuesWith(RedisSerializationContext</span><br><span class="line">                        .SerializationPair</span><br><span class="line">                        <span class="comment">//设置Value的序列化机制为Json</span></span><br><span class="line">                        .fromSerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Object<span class="class">.<span class="keyword">class</span>)))</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(redisConnectionFactory).cacheDefaults(redisCacheConfiguration).build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro自定义Realm流程</title>
    <url>/2020/01/12/Shiro%E8%87%AA%E5%AE%9A%E4%B9%89Realm/</url>
    <content><![CDATA[<h3 id="Shiro自定义Realm流程"><a href="#Shiro自定义Realm流程" class="headerlink" title="Shiro自定义Realm流程"></a>Shiro自定义Realm流程</h3><p>在<strong>SimpleAccountRealm</strong>类中调用<strong>doGetAuthenticationInfo()</strong>方法, 用来从token中解析username, 根据username获取SimpleAccount对象account, 将account 返回给<strong>AuthenticatingRealm</strong>类的<strong>getAuthenticationInfo()</strong>方法中的info, 在<strong>getAuthenticationInfo()</strong>方法中调用的语句为<strong>info = doGetAuthenticationInfo(token);</strong> info即为上述返回的account对象; (SimpleAccount为AuthenticationInfo的实现类) 附一:</p>
<ul>
<li>如果info为null, 直接return回去,来到 <strong>ModularRealmAuthenticator</strong>类中,抛出<code>UnknownAccountException</code>的异常</li>
<li>如果在info不为null, 则在此方法中继续进行Credential匹配, 调用<strong>assertCredentialsMatch(token, info);</strong>方法中继续调用<strong>CredentialsMatcher</strong>实现类的<strong>cm.doCredentialsMatch(token, info)</strong> 匹配不成功则抛出<code>IncorrectCredentialsException</code>的异常, 在匹配时默认使用的凭证匹配器为<strong>SimpleCredentialsMatcher</strong>, 如果要进行加密方式匹配是不行的, 因此要进行密码加密匹配时需要指定要使用的凭证匹配器, 附二;</li>
</ul>
<hr>
<p>附一:</p>
<p><strong>SimpleAccount</strong>的继承实现关系</p>
<p>AuthenticationInfo(org.apache.shiro.authc)—-&gt;<strong>info</strong></p>
<p>​    Account (org.apache.shiro.authc)</p>
<p>​        SimpleAccount (org.apache.shiro.authc)—-&gt;<strong>account</strong></p>
<hr>
<p>附二:</p>
<p>凭证匹配器的继承实现关系</p>
<p>AllowAllCredentialsMatcher (org.apache.shiro.authc.credential)<br>PasswordMatcher (org.apache.shiro.authc.credential)<br><strong>SimpleCredentialsMatcher</strong> (org.apache.shiro.authc.credential)<br>    <strong>HashedCredentialsMatcher</strong> (org.apache.shiro.authc.credential)<br>        Md5CredentialsMatcher (org.apache.shiro.authc.credential)<br>        Sha512CredentialsMatcher (org.apache.shiro.authc.credential)<br>        Md2CredentialsMatcher (org.apache.shiro.authc.credential)<br>        Sha1CredentialsMatcher (org.apache.shiro.authc.credential)<br>        Sha256CredentialsMatcher (org.apache.shiro.authc.credential)<br>        Sha384CredentialsMatcher (org.apache.shiro.authc.credential)</p>
<hr>
<p>部分源码:</p>
<p>CachingRealm (org.apache.shiro.realm)<br>    AuthenticatingRealm (org.apache.shiro.realm)<br>        AuthorizingRealm (org.apache.shiro.realm)<br>            <strong>SimpleAccountRealm</strong> (org.apache.shiro.realm)<br>                TextConfigurationRealm (org.apache.shiro.realm.text)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken upToken = (UsernamePasswordToken) token;</span><br><span class="line">        SimpleAccount account = getUser(upToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (account != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (account.isLocked()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"Account ["</span> + account + <span class="string">"] is locked."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (account.isCredentialsExpired()) &#123;</span><br><span class="line">                String msg = <span class="string">"The credentials for account ["</span> + account + <span class="string">"] are expired"</span>;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ExpiredCredentialsException(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>CachingRealm (org.apache.shiro.realm)<br>    <strong>AuthenticatingRealm</strong> (org.apache.shiro.realm)<br>        AuthorizingRealm (org.apache.shiro.realm)<br>            SimpleAccountRealm (org.apache.shiro.realm)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        AuthenticationInfo info = getCachedAuthenticationInfo(token);</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//otherwise not cached, perform the lookup:</span></span><br><span class="line">            info = doGetAuthenticationInfo(token);</span><br><span class="line">            log.debug(<span class="string">"Looked up AuthenticationInfo [&#123;&#125;] from doGetAuthenticationInfo"</span>, info);</span><br><span class="line">            <span class="keyword">if</span> (token != <span class="keyword">null</span> &amp;&amp; info != <span class="keyword">null</span>) &#123;</span><br><span class="line">                cacheAuthenticationInfoIfPossible(token, info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.debug(<span class="string">"Using cached authentication info [&#123;&#125;] to perform credentials matching."</span>, info);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            assertCredentialsMatch(token, info);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.debug(<span class="string">"No AuthenticationInfo found for submitted AuthenticationToken [&#123;&#125;].  Returning null."</span>, token);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>AbstractAuthenticator (org.apache.shiro.authc)<br>    <strong>ModularRealmAuthenticator</strong> (org.apache.shiro.authc.pam)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doSingleRealmAuthentication</span><span class="params">(Realm realm, AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!realm.supports(token)) &#123;</span><br><span class="line">            String msg = <span class="string">"Realm ["</span> + realm + <span class="string">"] does not support authentication token ["</span> +</span><br><span class="line">                    token + <span class="string">"].  Please ensure that the appropriate Realm implementation is "</span> +</span><br><span class="line">                    <span class="string">"configured correctly or that the realm accepts AuthenticationTokens of this type."</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedTokenException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        AuthenticationInfo info = realm.getAuthenticationInfo(token);</span><br><span class="line">        <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String msg = <span class="string">"Realm ["</span> + realm + <span class="string">"] was unable to find account data for the "</span> +</span><br><span class="line">                    <span class="string">"submitted AuthenticationToken ["</span> + token + <span class="string">"]."</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive与HBase区别</title>
    <url>/2019/12/29/Hive%E4%B8%8EHBase%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="1-两者分别是什么？"><a href="#1-两者分别是什么？" class="headerlink" title="1. 两者分别是什么？"></a>1. 两者分别是什么？</h4><p>​        <strong>Apache Hive</strong>是一个构建在Hadoop基础设施之上的数据仓库。通过Hive可以使用HQL语言查询存放在HDFS上的数据。HQL是一种类SQL语言，这种语言最终被转化为Map/Reduce. 虽然Hive提供了SQL查询功能，但是Hive不能够进行交互查询–因为它只能够在Haoop上批量的执行Hadoop。    </p>
<p>​        <strong>Apache HBase</strong>是一种Key/Value系统，它运行在HDFS之上。和Hive不一样，Hbase的能够在它的数据库上实时运行，而不是运行MapReduce任务。Hive被分区为表格，表格又被进一步分割为列簇。列簇必须使用schema定义，列簇将某一类型列集合起来（列不要求schema定义）。例如，“message”列簇可能包含：“to”, ”from” “date”, “subject”, 和”body”. 每一个 key/value对在Hbase中被定义为一个cell，每一个key由row-key，列簇、列和时间戳。在Hbase中，行是key/value映射的集合，这个映射通过row-key来唯一标识。Hbase利用Hadoop的基础设施，可以利用通用的设备进行水平的扩展。</p>
<h4 id="2-两者的特点"><a href="#2-两者的特点" class="headerlink" title="2. 两者的特点"></a>2. 两者的特点</h4><p>​        Hive帮助熟悉SQL的人运行MapReduce任务。因为它是JDBC兼容的，同时，它也能够和现存的SQL工具整合在一起。运行Hive查询会花费很长时间，因为它会默认遍历表中所有的数据。虽然有这样的缺点，一次遍历的数据量可以通过Hive的分区机制来控制。分区允许在数据集上运行过滤查询，这些数据集存储在不同的文件夹内，查询的时候只遍历指定文件夹（分区）中的数据。这种机制可以用来，例如，只处理在某一个时间范围内的文件，只要这些文件名中包括了时间格式。    </p>
<p>​        HBase通过存储key/value来工作。它支持四种主要的操作：增加或者更新行，查看一个范围内的cell，获取指定的行，删除指定的行、列或者是列的版本。版本信息用来获取历史数据（每一行的历史数据可以被删除，然后通过Hbase compactions就可以释放出空间）。虽然HBase包括表格，但是schema仅仅被表格和列簇所要求，列不需要schema。Hbase的表格包括增加/计数功能。</p>
<h4 id="3-限制"><a href="#3-限制" class="headerlink" title="3. 限制"></a>3. 限制</h4><p>​        Hive目前不支持更新操作。另外，由于hive在hadoop上运行批量操作，它需要花费很长的时间，通常是几分钟到几个小时才可以获取到查询的结果。Hive必须提供预先定义好的schema将文件和目录映射到列，并且Hive与ACID不兼容。    </p>
<p>​        HBase查询是通过特定的语言来编写的，这种语言需要重新学习。类SQL的功能可以通过Apache Phonenix实现，但这是以必须提供schema为代价的。另外，Hbase也并不是兼容所有的ACID特性，虽然它支持某些特性。最后但不是最重要的–为了运行Hbase，Zookeeper是必须的，zookeeper是一个用来进行分布式协调的服务，这些服务包括配置服务，维护元信息和命名空间服务。</p>
<h4 id="4-应用场景"><a href="#4-应用场景" class="headerlink" title="4.应用场景"></a>4.应用场景</h4><p>​        Hive适合用来对一段时间内的数据进行分析查询，例如，用来计算趋势或者网站的日志。Hive不应该用来进行实时的查询。因为它需要很长时间才可以返回结果。    Hbase非常适合用来进行大数据的实时查询。Facebook用Hbase进行消息和实时的分析。它也可以用来统计Facebook的连接数。</p>
<h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h4><p>​        Hive和Hbase是两种基于Hadoop的不同技术–Hive是一种类SQL的引擎，并且运行MapReduce任务，Hbase是一种在Hadoop之上的NoSQL 的Key/vale数据库。当然，这两种工具是可以同时使用的。就像用Google来搜索，用FaceBook进行社交一样，Hive可以用来进行统计查询，HBase可以用来进行实时查询，数据也可以从Hive写到Hbase，设置再从Hbase写回Hive。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>删除3D对象</title>
    <url>/2019/12/28/%E5%88%A0%E9%99%A43D%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h4 id="删除Windows资源文件夹中3D对象文件夹"><a href="#删除Windows资源文件夹中3D对象文件夹" class="headerlink" title="删除Windows资源文件夹中3D对象文件夹"></a>删除Windows资源文件夹中<code>3D对象</code>文件夹</h4><p>复制以下内容保存为<code>.bat</code>文件,右键以管理员模式运行即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">REG DELETE <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;0DB7E03F-FC29-4DC6-9020-FF41B59E513A&#125;"</span> /f</span><br><span class="line">REG DELETE <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;0DB7E03F-FC29-4DC6-9020-FF41B59E513A&#125;"</span> /f</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>脚本命令</category>
      </categories>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows关闭端口占用</title>
    <url>/2019/12/26/Windows%E5%85%B3%E9%97%AD%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<p>查看端口使用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>

<p>已知被占用端口号, 如1080, 获取到使用该端口的进程ID, 即PID, (假设为12236)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr <span class="string">"1080"</span></span><br></pre></td></tr></table></figure>

<p>使用获取到的PID查找对应应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist | findstr <span class="string">"12236"</span></span><br></pre></td></tr></table></figure>

<p>使用获取到的进程PID杀掉应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill /f /t /im <span class="string">"12236"</span></span><br></pre></td></tr></table></figure>

<p>自动关闭占用端口进程bat脚本:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">title Close Port</span><br><span class="line"><span class="built_in">set</span> /p port=Please enter port:</span><br><span class="line"><span class="keyword">if</span> <span class="string">"%port%"</span> == <span class="string">""</span> (</span><br><span class="line">    <span class="built_in">echo</span> Please enter a port <span class="built_in">which</span> is not null</span><br><span class="line">    goto end</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">"tokens=1-5"</span> %%a <span class="keyword">in</span> (<span class="string">'netstat -ano ^| find ":%port% "'</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">echo</span> %%a %%b %%c %%d %%e</span><br><span class="line">    @<span class="built_in">echo</span> %%b|findstr /c<span class="string">":%port%"</span> &gt;nul</span><br><span class="line">    <span class="keyword">if</span> %errorlevel% equ 0 (</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"%%e"</span> == <span class="string">""</span> (</span><br><span class="line">            <span class="keyword">if</span> not <span class="string">"%%d"</span> == <span class="string">"0"</span> (</span><br><span class="line">                <span class="built_in">echo</span> port is localhost <span class="built_in">set</span> pid %%d</span><br><span class="line">                <span class="built_in">set</span> pid=%%d</span><br><span class="line">            )</span><br><span class="line">        ) <span class="keyword">else</span> (</span><br><span class="line">            <span class="keyword">if</span> not <span class="string">"%%e"</span> == <span class="string">"0"</span> (</span><br><span class="line">               <span class="built_in">echo</span> port is localhost <span class="built_in">set</span> pid %%d</span><br><span class="line">               <span class="built_in">set</span> pid=%%e</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    ) <span class="keyword">else</span> (</span><br><span class="line">        <span class="built_in">echo</span> port not localhost</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"%pid%"</span>==<span class="string">""</span> (</span><br><span class="line"> <span class="built_in">echo</span> Port not used %port%</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line"> <span class="built_in">echo</span> used port %port% the process %pid%</span><br><span class="line"> taskkill /f /pid %pid%</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line">pause</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本命令</category>
      </categories>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
</search>
